racescreen.js (caleb kornegay on 11/18/2023 at 13:57): import getRaceData from '../api/racedetails'; 
racescreen.js (caleb kornegay on 11/18/2023 at 13:57): import BaseCard from '../components/card';
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):             raceData: getRaceData(this.props.route.params?.raceId),
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):         this.state.raceData.catch(error => {
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):             console.warn(error);
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):         }).then(raceData => {
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):             this.setState({raceSchedule: {
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                 practiceDate: [raceData.fp1_date, raceData.fp2_date, raceData.fp3_date],
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                 practiceTime: [raceData.fp1_time, raceData.fp2_time, raceData.fp3_time],
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                 qualifying: [raceData.quali_date, raceData.quali_time],
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                 sprint: [raceData.sprint_date, raceData.sprint_time],
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                 race: [raceData.date, raceData.time],
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):             }});
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):             this.setState({raceResults: raceData['grid']});
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):             this.setState({isLoading: false});
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):             this.forceUpdate();
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):         }).catch(error => {
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):             console.warn(error);
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):         });
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):     getTime(result) {
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):         return result.time.substring(0,1) === '\\' ? result.status : result.time;
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):     }
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):         if (this.state.isLoading) {
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                     <Text>Loading Results...</Text>
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):               {this.state.raceResults !== undefined && this.state.raceResults.length > 0 ? (
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                 this.state.raceResults.map((result, index) => (
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                 <View key={index}>
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                     <BaseCard 
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                         name={result.name}
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                         subName={result.constructor}
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                         body={
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                             'Ending Position: ' + result.position + 
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                             '\nStarting Position: ' + result.startingPosition + 
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                             '\nPoints: ' + result.points +
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                             '\nTime: ' + this.getTime(result) + 
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                             '\nLaps: ' + result.laps
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                         }
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                     />
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                 </View>
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):               {this.state.raceSchedule.practiceDate ? (
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                   {this.state.raceSchedule.practiceDate.map((session, index) => (
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                     session !== null ? <Text key={index} style={styles.listItem}>
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                       {`Session ${index + 1}: ${session} at ${this.state.raceSchedule.practiceTime[index]}`}
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                     </Text> : null
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):               {this.state.raceSchedule.qualifying[0] !== null ? (
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                     Qualifying: {this.state.raceSchedule.qualifying[0]} at {this.state.raceSchedule.qualifying[1]}
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):               ) : 
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                 <View style={styles.list}>
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                     <Text style={styles.listItem}>
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                         No qualifying data at this time
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                     </Text>
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                 </View>}
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):               {this.state.raceSchedule.sprint[0] !== null ? (
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                     Sprint: {this.state.raceSchedule.sprint[0]} at {this.state.raceSchedule.sprint[1]}
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):               ) : 
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                 <View style={styles.list}>
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                     <Text style={styles.listItem}>
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                         No sprint data at this time
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                     </Text>
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                 </View>}
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):               {this.state.raceSchedule.race[0] !== null ? (
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                     Race: {this.state.raceSchedule.race[0]} at {this.state.raceSchedule.race[1]}
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):               ) : 
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                 <View style={styles.list}>
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                     <Text style={styles.listItem}>
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                         No race data at this time
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                     </Text>
racescreen.js (caleb kornegay on 11/18/2023 at 13:57):                 </View>}
racescreen.js (caleb kornegay on 11/20/2023 at 12:22): }
stack.js     (caleb kornegay on 11/20/2023 at 12:22): import DateRangePicker from './daterangepicker';
stack.js     (caleb kornegay on 11/20/2023 at 12:22): import SearchBar from './searchbar';
tab.js       (caleb kornegay on 11/13/2023 at 12:14):                                     name={'home'}
leaguemasterscreen.js (caleb kornegay on 11/20/2023 at 12:22): 						{this.state.raceDetails['_j'] !== null? 
leaguemasterscreen.js (caleb kornegay on 11/20/2023 at 12:22):                         this.state.raceDetails['_j']['grid'][2]['name'] : 'loading...'}
leaguemasterscreen.js (caleb kornegay on 11/20/2023 at 12:22): 						{this.state.raceDetails['_j'] !== null? 
leaguemasterscreen.js (caleb kornegay on 11/20/2023 at 12:22):                         this.state.raceDetails['_j']['grid'][1]['name']  : 'loading...'}
leaguemasterscreen.js (caleb kornegay on 11/20/2023 at 12:22): 						{this.state.raceDetails['_j'] !== null? 
leaguemasterscreen.js (caleb kornegay on 11/20/2023 at 12:22):                         this.state.raceDetails['_j']['grid'][0]['name'] : 'loading...'}
leaguemasterscreen.js (caleb kornegay on 11/20/2023 at 12:22): 							{this.state.raceDetails['_j'] !== null? 
leaguemasterscreen.js (caleb kornegay on 11/20/2023 at 12:22):                             this.state.raceDetails['_j']['name'] : 'loading...'}
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14): async function buildcards(data) {
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):     const ret = [];
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):     ret.push(<BaseCard
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):         where={null}
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):         message={'scrum master'}
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):         name={data.firstname + ' ' + data.surname}
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):         body={'Short name: ' + data.code + '\nNumber: ' + data.number + '\n' + 
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):               'Date of Birth: ' + data.dob + '\n' + 
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):               'Nationality: ' + data.nationality}
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):         key={data.driverId}
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):     />);
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):     for (let i = 0; i < data.results.length; ++i) {
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):         ret.push(<BaseCard 
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):             where={null}
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):             message={'scrum master'}
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):             name={data.surname}
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):             body={'Year: ' + data.results[i].year + '\nTeam: ' + data.results[i].constructor + 
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):             '\nPosition: ' + data.results[i].position + '\nWins: ' + data.results[i].wins + 
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):             '\nPoints: ' + data.results[i].points
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):             }
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):             key={data.results[i].year}
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):             />);
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):     }
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):     return ret;
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14): }
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):         }).then(async data => {
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):             // return (<View>
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):                 // <BaseCard
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):                 //     where={null}
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):                 //     message={'scrum master'}
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):                 //     name={data.firstname + ' ' + data.surname}
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):                 //     body={'Number: ' + data.number + '\n' + 
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):                 //           'Team: ' + data.results[0].constructor + '\n' +
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):                 //           'Total Driver Points: ' + data.results[0].points + '\n' +
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):                 //           'Wins: ' + data.results[0].wins +
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):                 //           '\n' + 'Driver Position: ' + data.results[0].position + '\n' + 
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):                 //           'Date of Birth: ' + data.dob + '\n' + 
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):                 //           'Nationality: ' + data.nationality}
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):                 //     subName={data.code}
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):                 //     bgcolor={'#ff0000'}
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):                 // />
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):             // </View>
driverdetails.js (caleb kornegay on 11/13/2023 at 12:14):             return await buildcards(data);
racedetails.js (caleb kornegay on 11/18/2023 at 13:57): export default async function getRaceData(id) {
racedetails.js (caleb kornegay on 11/18/2023 at 13:57):     return fetch (BASEURL+'/v1/races/'+id+'/?format=json')
racedetails.js (caleb kornegay on 11/18/2023 at 13:57):     .catch(error => {
racedetails.js (caleb kornegay on 11/18/2023 at 13:57):         console.warn(error);
racedetails.js (caleb kornegay on 11/18/2023 at 13:57):     }).then(response => {
racedetails.js (caleb kornegay on 11/18/2023 at 13:57):         return response.json();
racedetails.js (caleb kornegay on 11/18/2023 at 13:57):     }).catch(error => {
racedetails.js (caleb kornegay on 11/18/2023 at 13:57):         console.warn(error);
racedetails.js (caleb kornegay on 11/18/2023 at 13:57):     }).then(data => {
racedetails.js (caleb kornegay on 11/18/2023 at 13:57):         return JSON.parse(JSON.stringify(data));
racedetails.js (caleb kornegay on 11/18/2023 at 13:57):     }).catch(error => {
racedetails.js (caleb kornegay on 11/18/2023 at 13:57):         console.warn(error);
racedetails.js (caleb kornegay on 11/18/2023 at 13:57):     });
urls.js      (calebkornegay on 11/28/2023 at 16:16): export const V1MESSAGESJSON=BASEURL+'/v1/messages/?format=json';
racescreen.js (calebkornegay on 11/28/2023 at 16:16): 		backgroundColor: '#d0d0d0',
racescreen.js (calebkornegay on 11/28/2023 at 17:17):                         navigation={this.props.navigation}
racescreen.js (calebkornegay on 11/28/2023 at 17:17):                         where={'DriverMasterScreen'}
racescreen.js (calebkornegay on 11/28/2023 at 17:17):                         id={result['driverId']}
racescreen.js (calebkornegay on 11/28/2023 at 17:17):                         bgcolor={result['color']}
driverdetails.js (calebkornegay on 11/28/2023 at 17:15):         bgcolor={data['color']}
driverdetails.js (calebkornegay on 11/28/2023 at 17:15):             bgcolor={data['color']}
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15): async function getLeagueData(id, year){
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15):     return year !== undefined && year !== null ? await fetch(BASEURL+'/v1/leagues/'+id+'/?=format.json&year='+year)
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15):         .catch(error => {
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15):             console.warn(error);
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15):         }).then(response => {
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15):             return response.json();
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15):         }).catch(error => {
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15):             console.warn(error);
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15):         }).then(json => {
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15):             return JSON.parse(JSON.stringify(json));
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15):         }).catch(error => {
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15):             console.warn(error);
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15):         }).then(data => {
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15):             return data;
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15):         }).catch(error => {
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15):             console.warn(error);
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15):         }) : await fetch(BASEURL+'/v1/leagues/'+id+'/?=format.json')
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15): export async function getConstructorDetails(league, year){
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15):     const data = await getLeagueData(league, year);
leaguemasterscreen.js (calebkornegay on 11/28/2023 at 16:16): import { ScrollView, View, Dimensions, StyleSheet, Text, Animated, Easing, Image } from 'react-native';
leaguemasterscreen.js (calebkornegay on 11/28/2023 at 17:18): 		super(props);
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):             date: props.route.params?.raceId | null,
leaguemasterscreen.js (calebkornegay on 11/28/2023 at 17:18): 			constructorDetails: getConstructorDetails(props.route.params.id, 
leaguemasterscreen.js (calebkornegay on 11/28/2023 at 17:18):                 props.route.params?.raceId), // load constructors into screen state
leaguemasterscreen.js (calebkornegay on 11/28/2023 at 17:18): 			driverDetails: getDriverDetails(props.route.params.id),	// load drivers into screen state
leaguemasterscreen.js (calebkornegay on 11/28/2023 at 17:18): 			raceDetails: getRace(),	// load races into screen state
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):         this.state.constructorDetails //check if the constructors have loaded
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):         });
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):         });
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):         });
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 		if(this.state.constructorDetails !== nextState.constructorDetails) return true;
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 		if(this.state.driverDetails !== nextState.driverDetails) return true;
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):         if(this.state.raceDetails !== nextState.raceDetails) return true;
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):     UNSAFE_componentWillReceiveProps(nextProps) {
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):         if(nextProps.route.params?.raceId !== this.props.route.params?.raceId) {
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):             this.updates(nextProps.route.params?.raceId);
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):             return true;
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):         }
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):     }
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):     updates(year) {
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):         this.setState({isLoadingConstructors: true,
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 			isLoadingDrivers: true,
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 			isLoadingRace: true,
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):         });
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 		this.state.constructorDetails = getConstructorDetails(this.props.route.params.id, year); // load constructors into screen state
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):         this.state.driverDetails = getDriverDetails(this.props.route.params.id);	// load drivers into screen state
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):         this.state.raceDetails = getRace();	// load races into screen state
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 		this.state.constructorDetails //check if the constructors have loaded
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 			.catch(error => {
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 				console.warn(error);
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 			}).then((data) => {
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 				this.setState({isLoadingConstructors: false});
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):                 console.log(data);
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 			}).catch(error => {
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 				console.warn(error);
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):         });
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 		this.state.driverDetails //check if the drivers have loaded
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 			.catch(error => {
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 				console.warn(error);
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 			}).then(() => {
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 				this.setState({isLoadingDrivers: false});
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 			}).catch(error => {
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 				console.warn(error);
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):         });
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 		this.state.raceDetails // check if the races have loaded
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 			.catch(error => {
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 				console.warn(error);
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 			}).then(() => {
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):                 this.setState({isLoadingRace: false});
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 			}).catch(error => {
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 				console.warn(error);
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):         });
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):     }
leaguemasterscreen.js (calebkornegay on 11/28/2023 at 16:16):         if (this.props.route.params?.id !== 1) {
leaguemasterscreen.js (calebkornegay on 11/28/2023 at 17:18):             return (<View style={{
leaguemasterscreen.js (calebkornegay on 11/28/2023 at 17:18):                 flex: 1,
leaguemasterscreen.js (calebkornegay on 11/28/2023 at 17:18):                 backgroundColor: '#d0d0d0',
leaguemasterscreen.js (calebkornegay on 11/28/2023 at 17:18):                 alignItems: 'center',
leaguemasterscreen.js (calebkornegay on 11/28/2023 at 17:18):                 justifyContent: 'center',
leaguemasterscreen.js (calebkornegay on 11/28/2023 at 17:18):                 }}>
leaguemasterscreen.js (calebkornegay on 11/28/2023 at 16:16):                 <Image 
leaguemasterscreen.js (calebkornegay on 11/28/2023 at 17:18):                 source={require('../images/reid_eyes.jpg')}/>
leaguemasterscreen.js (calebkornegay on 11/28/2023 at 17:18):             </View>);
leaguemasterscreen.js (calebkornegay on 11/28/2023 at 16:16):         }
card.js      (calebkornegay on 11/28/2023 at 16:16): 			<View style={styles.cardStyle}>
card.js      (calebkornegay on 11/28/2023 at 16:16): 					style={[styles.container, {borderLeftColor: bgcolor, borderLeftWidth: 20, backgroundColor: '#ffffff'}]} 
testscreen.js (calebkornegay on 11/28/2023 at 15:28): import { StyleSheet, Text, View, Image } from 'react-native';
testscreen.js (calebkornegay on 11/28/2023 at 16:16): 		backgroundColor: '#d0d0d0',
testscreen.js (calebkornegay on 11/28/2023 at 15:28): 			<Text>DAVID!</Text>
testscreen.js (calebkornegay on 11/28/2023 at 15:28):             <Image 
testscreen.js (calebkornegay on 11/28/2023 at 15:28):             source={require('../images/reid.jpg')}/>
homescreen.js (calebkornegay on 11/28/2023 at 16:16): 		backgroundColor: '#d0d0d0',
homescreen.js (calebkornegay on 11/28/2023 at 15:28): 			<SafeAreaView style={{ flex: 1, backgroundColor: '#fff', textAlign: 'left'}}>
tab.js       (calebkornegay on 11/28/2023 at 15:28):                                         color={focused ? '#f00' : '#000'}
tab.js       (calebkornegay on 11/28/2023 at 15:28):                             title: 'Settings',
tab.js       (calebkornegay on 11/28/2023 at 15:28):                                     name={'cog'}
teamdetails.js (calebkornegay on 11/28/2023 at 17:16):                     body={'Origin: ' + data.nationality}
teamdetails.js (calebkornegay on 11/28/2023 at 16:16):                     bgcolor={data['color']}
teamdetails.js (calebkornegay on 11/28/2023 at 16:16):                         bgcolor={data['color']}
teamdetails.js (calebkornegay on 11/28/2023 at 16:16):                         bgcolor={data['color']}
teamdetails.js (calebkornegay on 11/28/2023 at 17:16):                         where={'LeagueMasterScreen'}
teamdetails.js (calebkornegay on 11/28/2023 at 17:16):                         raceID={data.results[i].year}
teamdetails.js (calebkornegay on 11/28/2023 at 17:16):                         id={1}
teamdetails.js (calebkornegay on 11/28/2023 at 17:16):                         navigation={navigation}
briefs.js    (calebkornegay on 11/28/2023 at 16:16):                 bgcolor={data['color']}
messages.js  (calebkornegay on 11/28/2023 at 16:16):                         bgcolor={'#ff8700'}
drivermasterscreen.js (calebkornegay on 11/15/2023 at 09:03): 		if(cards == null) return null;
drivermasterscreen.js (calebkornegay on 11/15/2023 at 09:03):         else return <View>{cards}</View>;
urls.js      (calebkornegay on 11/28/2023 at 16:16): export const V1MESSAGESJSON=BASEURL+'/v1/messages/?format=json';
tab.js       (calebkornegay on 11/28/2023 at 15:28):                                         color={focused ? '#f00' : '#000'}
tab.js       (calebkornegay on 11/28/2023 at 15:28):                             title: 'Settings',
tab.js       (calebkornegay on 11/28/2023 at 15:28):                                     name={'cog'}
briefs.js    (calebkornegay on 11/16/2023 at 15:24): async function grabcard(id, {navigation}){
briefs.js    (calebkornegay on 11/16/2023 at 15:24):                 where={'RaceScreen'}
briefs.js    (calebkornegay on 11/16/2023 at 15:24):                 navigation={navigation}
briefs.js    (calebkornegay on 11/28/2023 at 16:16):                 bgcolor={data['color']}
briefs.js    (calebkornegay on 11/16/2023 at 15:24):                 raceID={id}
briefs.js    (calebkornegay on 11/16/2023 at 15:24): async function getdata(ids, {navigation}){
briefs.js    (calebkornegay on 11/16/2023 at 15:24):         ret.push(grabcard(future[i], {navigation}));
briefs.js    (calebkornegay on 11/16/2023 at 15:24):         ret.push(grabcard(today[i], {navigation}));
briefs.js    (calebkornegay on 11/16/2023 at 15:24):         ret.push(grabcard(past[i], {navigation}));
briefs.js    (calebkornegay on 11/16/2023 at 15:24): export default async function getbriefs(date, {navigation}){
briefs.js    (calebkornegay on 11/16/2023 at 15:24): 	return await getdata(await getnearestraces(date), {navigation});
testscreen.js (calebkornegay on 11/28/2023 at 15:28): import { StyleSheet, Text, View, Image } from 'react-native';
testscreen.js (calebkornegay on 11/28/2023 at 16:16): 		backgroundColor: '#d0d0d0',
testscreen.js (calebkornegay on 11/28/2023 at 15:28): 			<Text>DAVID!</Text>
testscreen.js (calebkornegay on 11/28/2023 at 15:28):             <Image 
testscreen.js (calebkornegay on 11/28/2023 at 15:28):             source={require('../images/reid.jpg')}/>
messages.js  (calebkornegay on 11/28/2023 at 16:16):                         bgcolor={'#ff8700'}
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15): async function getLeagueData(id, year){
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15):     return year !== undefined && year !== null ? await fetch(BASEURL+'/v1/leagues/'+id+'/?=format.json&year='+year)
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15):         .catch(error => {
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15):             console.warn(error);
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15):         }).then(response => {
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15):             return response.json();
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15):         }).catch(error => {
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15):             console.warn(error);
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15):         }).then(json => {
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15):             return JSON.parse(JSON.stringify(json));
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15):         }).catch(error => {
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15):             console.warn(error);
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15):         }).then(data => {
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15):             return data;
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15):         }).catch(error => {
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15):             console.warn(error);
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15):         }) : await fetch(BASEURL+'/v1/leagues/'+id+'/?=format.json')
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15): export async function getConstructorDetails(league, year){
leaguedetails.js (calebkornegay on 11/28/2023 at 17:15):     const data = await getLeagueData(league, year);
card.js      (calebkornegay on 11/28/2023 at 16:16): 			<View style={styles.cardStyle}>
card.js      (calebkornegay on 11/28/2023 at 16:16): 					style={[styles.container, {borderLeftColor: bgcolor, borderLeftWidth: 20, backgroundColor: '#ffffff'}]} 
card.js      (calebkornegay on 11/16/2023 at 15:25):                     {newTitle: title, id: id, raceId: raceID}) : null}>
homescreen.js (calebkornegay on 11/28/2023 at 16:16): 		backgroundColor: '#d0d0d0',
homescreen.js (calebkornegay on 11/16/2023 at 15:26): 	constructor({navigation}){
homescreen.js (calebkornegay on 11/16/2023 at 15:26): 		super();
homescreen.js (calebkornegay on 11/16/2023 at 15:26): 			briefs: getbriefs(null, {navigation}),
homescreen.js (calebkornegay on 11/16/2023 at 15:26):         const { navigation } = this.props;
homescreen.js (calebkornegay on 11/16/2023 at 15:26):             getbriefs(formattedDate, {navigation})
homescreen.js (calebkornegay on 11/28/2023 at 15:28): 			<SafeAreaView style={{ flex: 1, backgroundColor: '#fff', textAlign: 'left'}}>
racescreen.js (calebkornegay on 11/28/2023 at 16:16): 		backgroundColor: '#d0d0d0',
racescreen.js (calebkornegay on 11/28/2023 at 17:17):                         navigation={this.props.navigation}
racescreen.js (calebkornegay on 11/28/2023 at 17:17):                         where={'DriverMasterScreen'}
racescreen.js (calebkornegay on 11/28/2023 at 17:17):                         id={result['driverId']}
racescreen.js (calebkornegay on 11/28/2023 at 17:17):                         bgcolor={result['color']}
leaguemasterscreen.js (calebkornegay on 11/28/2023 at 16:16): import { ScrollView, View, Dimensions, StyleSheet, Text, Animated, Easing, Image } from 'react-native';
leaguemasterscreen.js (calebkornegay on 11/28/2023 at 17:18): 		super(props);
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):             date: props.route.params?.raceId | null,
leaguemasterscreen.js (calebkornegay on 11/28/2023 at 17:18): 			constructorDetails: getConstructorDetails(props.route.params.id, 
leaguemasterscreen.js (calebkornegay on 11/28/2023 at 17:18):                 props.route.params?.raceId), // load constructors into screen state
leaguemasterscreen.js (calebkornegay on 11/28/2023 at 17:18): 			driverDetails: getDriverDetails(props.route.params.id),	// load drivers into screen state
leaguemasterscreen.js (calebkornegay on 11/28/2023 at 17:18): 			raceDetails: getRace(),	// load races into screen state
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):         this.state.constructorDetails //check if the constructors have loaded
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):         });
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):         });
leaguemasterscreen.js (calebkornegay on 11/15/2023 at 09:37):                 this.setState({isLoadingRace: false});
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):         });
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 		if(this.state.constructorDetails !== nextState.constructorDetails) return true;
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 		if(this.state.driverDetails !== nextState.driverDetails) return true;
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):         if(this.state.raceDetails !== nextState.raceDetails) return true;
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):     UNSAFE_componentWillReceiveProps(nextProps) {
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):         if(nextProps.route.params?.raceId !== this.props.route.params?.raceId) {
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):             this.updates(nextProps.route.params?.raceId);
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):             return true;
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):         }
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):     }
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):     updates(year) {
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):         this.setState({isLoadingConstructors: true,
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 			isLoadingDrivers: true,
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 			isLoadingRace: true,
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):         });
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 		this.state.constructorDetails = getConstructorDetails(this.props.route.params.id, year); // load constructors into screen state
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):         this.state.driverDetails = getDriverDetails(this.props.route.params.id);	// load drivers into screen state
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):         this.state.raceDetails = getRace();	// load races into screen state
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 		this.state.constructorDetails //check if the constructors have loaded
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 			.catch(error => {
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 				console.warn(error);
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 			}).then((data) => {
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 				this.setState({isLoadingConstructors: false});
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):                 console.log(data);
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 			}).catch(error => {
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 				console.warn(error);
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):         });
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 		this.state.driverDetails //check if the drivers have loaded
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 			.catch(error => {
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 				console.warn(error);
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 			}).then(() => {
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 				this.setState({isLoadingDrivers: false});
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 			}).catch(error => {
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 				console.warn(error);
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):         });
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 		this.state.raceDetails // check if the races have loaded
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 			.catch(error => {
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 				console.warn(error);
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 			}).then(() => {
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):                 this.setState({isLoadingRace: false});
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 			}).catch(error => {
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09): 				console.warn(error);
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):         });
leaguemasterscreen.js (calebkornegay on 11/30/2023 at 10:09):     }
leaguemasterscreen.js (calebkornegay on 11/28/2023 at 16:16):         if (this.props.route.params?.id !== 1) {
leaguemasterscreen.js (calebkornegay on 11/28/2023 at 17:18):             return (<View style={{
leaguemasterscreen.js (calebkornegay on 11/28/2023 at 17:18):                 flex: 1,
leaguemasterscreen.js (calebkornegay on 11/28/2023 at 17:18):                 backgroundColor: '#d0d0d0',
leaguemasterscreen.js (calebkornegay on 11/28/2023 at 17:18):                 alignItems: 'center',
leaguemasterscreen.js (calebkornegay on 11/28/2023 at 17:18):                 justifyContent: 'center',
leaguemasterscreen.js (calebkornegay on 11/28/2023 at 17:18):                 }}>
leaguemasterscreen.js (calebkornegay on 11/28/2023 at 16:16):                 <Image 
leaguemasterscreen.js (calebkornegay on 11/28/2023 at 17:18):                 source={require('../images/reid_eyes.jpg')}/>
leaguemasterscreen.js (calebkornegay on 11/28/2023 at 17:18):             </View>);
leaguemasterscreen.js (calebkornegay on 11/28/2023 at 16:16):         }
teamdetails.js (calebkornegay on 11/28/2023 at 17:16):                     body={'Origin: ' + data.nationality}
teamdetails.js (calebkornegay on 11/28/2023 at 16:16):                     bgcolor={data['color']}
teamdetails.js (calebkornegay on 11/28/2023 at 16:16):                         bgcolor={data['color']}
teamdetails.js (calebkornegay on 11/28/2023 at 16:16):                         bgcolor={data['color']}
teamdetails.js (calebkornegay on 11/28/2023 at 17:16):                         where={'LeagueMasterScreen'}
teamdetails.js (calebkornegay on 11/28/2023 at 17:16):                         raceID={data.results[i].year}
teamdetails.js (calebkornegay on 11/28/2023 at 17:16):                         id={1}
teamdetails.js (calebkornegay on 11/28/2023 at 17:16):                         navigation={navigation}
driverdetails.js (calebkornegay on 11/28/2023 at 17:15):         bgcolor={data['color']}
driverdetails.js (calebkornegay on 11/28/2023 at 17:15):             bgcolor={data['color']}
